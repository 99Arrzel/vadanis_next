// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum PersonaTipo {
  CLIENTE
  PROVEEDOR
}

model Personas {
  id        Int         @id @default(autoincrement())
  ci        String      @unique
  nombres   String?     @db.VarChar(255)
  apellidos String      @db.VarChar(255)
  telefono  String?     @db.VarChar(255)
  direccion String?     @db.VarChar(255)
  estado    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tipo      PersonaTipo @default(CLIENTE)

  Ventas        Ventas[]
  Adquisiciones Adquisiciones[]
  User          User?           @relation(fields: [userId], references: [id])
  userId        String?
}

model CategoriaProductos {
  id        Int         @id @default(autoincrement())
  nombre    String      @db.VarChar(255)
  createdAt DateTime    @default(now())
  Productos Productos[]
}

model Ventas {
  id        Int      @id @default(autoincrement())
  fecha     DateTime @default(now())
  total     Decimal  @db.Decimal(10, 2)
  estado    Boolean  @default(true) // true = activo, false = anulado
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personaId Int
  Persona   Personas @relation(fields: [personaId], references: [id]) //A quien se le vende

  Usuario       User            @relation(fields: [userId], references: [id]) //Quien vende
  userId        String
  DetallesVenta DetallesVenta[]
}

model Imagenes {
  id                    Int                     @id @default(autoincrement())
  url                   String                  @db.VarChar(255)
  estado                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  DetallesAdquisiciones DetallesAdquisiciones[]
  ImagenesProductos     ImagenesProductos[]
}

model ImagenesProductos {
  imagenId   Int
  imagen     Imagenes  @relation(fields: [imagenId], references: [id])
  productoId Int
  Producto   Productos @relation(fields: [productoId], references: [id])

  @@id([imagenId, productoId])
}

model DetallesAdquisiciones {
  id         Int      @id @default(autoincrement())
  comentario String
  cantidad   Int
  precio     Decimal  @db.Decimal(10, 2)
  estado     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  productoId Int
  Producto   Productos @relation(fields: [productoId], references: [id])

  adquisicionId Int
  Adquisicion   Adquisiciones   @relation(fields: [adquisicionId], references: [id])
  DetallesVenta DetallesVenta[]
  Marcas        Marcas?         @relation(fields: [marcasId], references: [id])
  marcasId      Int?
  Imagenes      Imagenes?       @relation(fields: [imagenesId], references: [id])
  imagenesId    Int?
}

model Adquisiciones {
  id        Int      @id @default(autoincrement())
  fecha     DateTime @default(now())
  total     Decimal  @db.Decimal(10, 2)
  estado    Boolean  @default(true) // true = activo, false = anulado
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personaId Int
  Persona   Personas @relation(fields: [personaId], references: [id]) //A quien le compramos

  Usuario User   @relation(fields: [userId], references: [id]) //Quien vende
  userId  String

  DetallesAdquisiciones DetallesAdquisiciones[]
}

model DetallesVenta {
  id       Int     @id @default(autoincrement())
  cantidad Int
  precio   Decimal @db.Decimal(10, 2)

  adquisicionId      Int
  DetalleAdquisicion DetallesAdquisiciones @relation(fields: [adquisicionId], references: [id])

  descuento  Decimal   @db.Decimal(10, 2)
  comentario String?   @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  productoId Int
  Producto   Productos @relation(fields: [productoId], references: [id])
  ventaId    Int
  Venta      Ventas    @relation(fields: [ventaId], references: [id])
}

model Productos {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(255)
  precio    Decimal  @db.Decimal(10, 2)
  stock     Int
  fecha_exp DateTime
  estado    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CategoriaProductos   CategoriaProductos? @relation(fields: [categoriaProductosId], references: [id])
  categoriaProductosId Int?

  marcaId Int
  Marca   Marcas? @relation(fields: [marcaId], references: [id])

  DetallesVenta         DetallesVenta[]
  DetallesAdquisiciones DetallesAdquisiciones[]
  ImagenesProductos     ImagenesProductos[]
}

model Marcas {
  id                    Int                     @id @default(autoincrement())
  nombre                String                  @unique
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  DetallesAdquisiciones DetallesAdquisiciones[]
  Productos             Productos[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UsuarioTipo {
  USUARIO
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String?         @unique
  emailVerified DateTime?
  tipo          UsuarioTipo     @default(USUARIO)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Personas      Personas[]
  Ventas        Ventas[]
  Adquisiciones Adquisiciones[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
